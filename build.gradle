import net.raphimc.viabedrock.generator.EnumGeneratorTask

plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'maven-publish'

    id "java-library"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.10"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}


repositories {
    mavenCentral()
    maven {
        name = "ViaVersion"
        url = "https://repo.viaversion.com"
    }
    maven {
        name = "Lenni0451"
        url = "https://maven.lenni0451.net/everything"
    }
    maven {
        name = "OpenCollab"
        url = "https://repo.opencollab.dev/maven-snapshots"
    }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io"

        content {
            includeGroup "com.github.Oryxel"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "com.viaversion:viafabricplus:4.2.4"

    compileOnly "net.lenni0451:Reflect:1.5.0"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

def enumSourceDir = layout.buildDirectory.dir("generated/enums/main/java")
def enumGeneratorTask = tasks.register("enumGeneratorTask", EnumGeneratorTask) {
    commitHash = "2a42b85946a308d830984f54ea20349aa2beaeed" // https://github.com/Mojang/bedrock-protocol-docs
    outputDirectory = enumSourceDir
}
tasks.compileJava.dependsOn(enumGeneratorTask)
tasks.sourcesJar.dependsOn(enumGeneratorTask)

sourceSets.main.java.srcDir(enumSourceDir)